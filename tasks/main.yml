---
# main tasks file for ansible-role-rgm
# vim: bs=2 sw=2 expandtab:

# As nagios 4 is present in EPEL repo, disable nagios from EPEL
- name: exclude nagios from EPEL repo
  ini_file:
    path: /etc/yum.repos.d/epel.repo
    section: "{{ item }}"
    option: exclude
    value: 'nagios*'
  with_items:
  - epel
  - epel-debuginfo
  - epel-source
  register: update_epel
  tags: packages

- name: force yum clean & make cache
  command: yum clean all
  args:
    warn: no
  when: update_epel.changed
  tags: packages

### selinux
# todo: configure RGM to work smoothly *with* selinux enabled
- name: disable SELinux
  selinux:
    state: disabled

### MariaDB base configuration
- name: configure mariadb
  include_tasks:
    file: mariadb.yml
    apply:
      tags: mariadb
  tags:
  - mariadb
  - grafana
  - nagvis

### installs RGM packages & dependencies
- name: install RGM packages (it may take some time...)
  yum:
    update_cache: "{{ not(update_epel.changed) }}"
    name: "{{ packages_system + packages_mariadb + packages_apache + packages_elastic + packages_influx_grafana + packages_prometheus + packages_rgm }}"
    state: latest
  retries: 10
  delay: 2
  register: yum_result
  until: yum_result.rc == 0
  tags: packages

### firewalld configuration
- name: ensure firewalld is enabled and running
  systemd:
    name: firewalld
    enabled: yes
    state: started

- name: configure firewalld services
  firewalld:
    service: "{{ item }}"
    permanent: yes
    state: enabled
  with_items:
  - ssh
  - http
  - https
  notify: service_restart_firewalld

- name: create Ansible tmp dirs for alternate users
  file:
    path: "/tmp/.ansible-{{ item }}/tmp"
    state: directory
    recurse: yes
    owner: "{{ item }}"
    group: "{{ rgm_group }}"
    mode: 0700
  with_items:
  - "{{ rgmweb_user }}"
  - nagios

- name: put default vimrc file
  copy:
    src: vimrc
    dest: "{{ item }}"
    owner: root
    group: root
    mode: 0640
  with_items:
  - /root/.vimrc
  - /etc/skel/.vimrc

- name: set RGM motd
  copy:
    src: rgm_motd.sh
    dest: /etc/profile.d/zzz_rgm.sh
    owner: root
    group: root
    mode: 0755

### sudoers base configuration
- name: set sudoers config file
  template:
    src: sudoers.j2
    dest: "/etc/sudoers.d/rgm"
    owner: root
    group: root
    mode: 0400
    seuser: system_u
    serole: object_r
    setype: etc_t
    selevel: s0

### default group & user
- name: create RGM group
  group:
    name: "{{ rgm_group }}"

- name: create RGM user
  user:
    name: "{{ rgm_user }}"
    comment: "RGM user"
    shell: /bin/bash
    group: "{{ rgm_group }}"
    groups: "wheel"
    append: yes
    generate_ssh_key: yes
    ssh_key_type: rsa
    ssh_key_comment: "RGM user key generated by Ansible on $HOSTNAME"
    ssh_key_bits: 2048
    ssh_key_file: .ssh/id_rsa
    update_password: on_create
    password: "{{ rgm_user_password | password_hash('sha512', lookup('password', '/dev/null length=16 chars=ascii_letters,digits,-,_,!,.,*')) }}"

### configure chronyd
- name: configure chrony daemon
  include_tasks:
    file:  ntp.yml
    apply:
      tags: ntp
  tags: ntp


### RGM distribution configuration
- name: configure RGM distribution
  include_tasks:
    file: distrib.yml
    apply:
      tags: distrib
  tags: distrib


### http/php base configuration
- name: configure apache/php
  include_tasks:
    file: http.yml
    apply:
      tags: http
  tags: http

### configure Prometheus
- name: configure prometheus
  include_tasks:
    file: prometheus.yml
    apply:
      tags: prometheus
  tags: prometheus

### configure Elastic Stack
- name: configure elastic stack
  include_tasks:
    file: elastic.yml
    apply:
      tags: elastic
  tags: elastic

### Actually influxdb and nagflux are correctly pre-configured
### out-of-the-box from their respective RPM package...
### only Grafana needs some customization as the RPM package
### comes untouched from upstream provided (Grafana Labs)
- name: configure influxdb/nagflux/grafana/histou
  include_tasks:
    file: grafana.yml
    apply:
      tags: grafana
  tags: grafana

### various

- name: kernel hardening (sysctl) following ANSII recomendations
  copy:
    src: sysctl_ansii.conf
    dest: /etc/sysctl.d/ansii-fr.conf
    owner: root
    group: root
    mode: 0644
  register: sysctl_ansii

- name: reload sysctl
  service:
    name: systemd-sysctl
    state: restarted
  when: sysctl_ansii.changed

- name: set swappiness (sysctl)
  sysctl:
    name: vm.swappiness
    value: "{{ sysctl_swappiness }}"
    state: present
    sysctl_file: "/etc/sysctl.d/98-swappiness.conf"
    reload: yes

### SSH hardening
- name: disable weak SSH ECDSA host keys
  copy:
    content: ''
    dest: "/etc/ssh/{{ item.file }}"
    owner: root
    group: root
    mode: "{{ item.mode }}"
  with_items:
  - { file: ssh_host_ecdsa_key,     mode: '0400' }
  - { file: ssh_host_ecdsa_key.pub, mode: '0644' }

- name: "SSH hardening"
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "{{ item.regex }}"
    line: "{{ item.line }}"
    insertafter: '^(#\s*)?UsePAM '
  with_items:
  - { regex: '^(#\s*)?PermitEmptyPasswords',         line: "PermitEmptyPasswords no" }
  - { regex: '^(#\s*)?PermitRootLogin',              line: "PermitRootLogin without-password" }
  - { regex: '^(#\s*)?StrictModes',                  line: "StrictModes yes" }
  - { regex: '^HostKey /etc/ssh/ssh_host_ecdsa_key', line: "#HostKey /etc/ssh/ssh_host_ecdsa_key" }
  - { regex: '^(#\s*)?Ciphers ',                     line: "Ciphers aes128-ctr,aes192-ctr,aes256-ctr" }
  - { regex: '^(#\s*)?MACs ',                        line: "MACs hmac-sha2-512,hmac-sha2-256,hmac-ripemd160" }
  - { regex: '^(#\s*)?KexAlgorithms ',               line: "KexAlgorithms diffie-hellman-group-exchange-sha256" }
  - { regex: '^(#\s*)?RekeyLimit ',                  line: "RekeyLimit default 1200" }
  - { regex: '^(#\s*)?TCPKeepAlive ',                line: "TCPKeepAlive yes" }
  - { regex: '^(#\s*)?MaxSessions ',                 line: "MaxSessions 10" }

### SSH keys
- name: create nagios SSH key
  command: ssh-keygen -t rsa -b 2048 -C "RGM Nagios ssh key on {{ ansible_hostname }}" -f /home/nagios/.ssh/id_rsa -N '' -q
  args:
    chdir: /home/nagios
    creates: /home/nagios/.ssh/id_rsa
  become: yes
  become_user: nagios

### NagVis configuration
- name: configure NagVis
  ini_file:
    path: "{{ rgm_root_path }}/nagvis/etc/nagvis.ini.php"
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
  - { section: 'backend_live_1', option: 'socket', value: 'unix:/srv/rgm/nagios/var/log/rw/live' }
  - { section: 'auth_mysql',     option: 'dbhost', value: '127.0.0.1' }
  - { section: 'auth_mysql',     option: 'dbport', value: '3306' }
  - { section: 'auth_mysql',     option: 'dbname', value: "{{ db_nagvis }}" }
  - { section: 'auth_mysql',     option: 'dbuser', value: "{{ mariadb_user }}" }
  - { section: 'auth_mysql',     option: 'dbpass', value: "{{ mariadb_pwd }}" }

- name: put nagvis mysql db schema init script
  template:
    src: nagvis/init_sql.php.j2
    dest: "{{ rgm_root_path }}/nagvis/share/frontend/nagvis-js/init_sql.php"
    owner: root
    group: apache
    mode: 0640

- name: force nagvis mysql schema initialization
  command: "php {{ rgm_root_path }}/nagvis/share/frontend/nagvis-js/init_sql.php"
  args:
    chdir: "{{ rgm_root_path }}/nagvis/share/frontend/nagvis-js"
  become: yes
  become_user: apache
  register: nagvis_init_sql
  changed_when: nagvis_init_sql.rc > 0
  failed_when: nagvis_init_sql.rc > 1

#- name: Reset cache file credential
#  file:
#    path : "{{ item }}"
#    owner: apache
#    group: apache
#    mode: 0644
#  with_fileglob: "{{ rgm_root_path }}/nagvis/var/nagvis-conf-*-cache"


### nagflux specific

- name: create nagios spool dir for nagvis
  file:
    path: /srv/rgm/nagflux/var/spool-nagios
    owner: nagios
    group: rgm
    mode: 0770
    state: directory

### lilac export nagios config

- name: update hostname on lilac config for RGM host entry
  shell: echo "UPDATE nagios_host SET name = '$(hostname)' WHERE id = 1;" | mysql lilac

- name: get a valid RGMAPI token
  uri:
    url: "https://localhost/rgmapi/getAuthToken?&username={{ rgm_admin_user }}&password={{ rgm_admin_password }}"
    method: GET
    body_format: json
    validate_certs: no
    status_code: 200
  register: auth_rgmapi

- name: export Lilac configuration
  uri:
    url: "https://localhost/rgmapi/exportConfiguration?&token={{ auth_rgmapi.json.RGMAPI_TOKEN }}"
    method: POST
    body_format: json
    body: '{ "jobName": "Nagios Export" }'
    validate_certs: no
    status_code: 200
  when: auth_rgmapi is succeeded
  notify: service_reload_nagios

### enable and start RGM services
- name: enable RGM daemons
  systemd:
    name: "{{ item }}"
    enabled: yes
    state: started
  with_items: "{{ rgm_services }}"

- name: update mlocate database
  command: /usr/bin/updatedb -f "$nodevs"