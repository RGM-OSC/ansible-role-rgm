--- 

# This is redundant as all RPM packages are already installed from main tasks
# but we secure it in case the role might be called directly from its tags
- name: ensure mariadb is installed
  yum:
    update_cache: no
    name: "{{ packages }}"
    state: present
  vars:
    packages: "{{ packages_mariadb }}"

- name: ensure MariaDB is up & running
  service:
    name: mariadb
    enabled: yes
    state: started

- name: check if MariaDB root user is password protected
  command: mysql --no-defaults --host=localhost --user=root -e '\q'
  register: mariadb_status
  failed_when: mariadb_status.rc == 2

- block:
  - name: generate random root password for mariadb
    set_fact:
      mariadb_root_password: "{{ lookup('password', '/dev/null length=16 chars=ascii_letters,digits,-,_,!,.,*') }}"

  - name: Set root user password
    mysql_user:
      name: root
      host: localhost
      password: "{{ mariadb_root_password }}"
      check_implicit_admin: yes
      login_user: root
      state: present

  - name: set .my.cnf for root user
    template:
      src: mariadb/my.cnf.j2
      dest: /root/.my.cnf
      owner: root
      group: root
      mode: 0600

  when: mariadb_status.rc == 0


- fail:
    msg: |
      "Can't connect to MariaDB server using the provided credentials !"
      "Please check the following variables:"
      "  mariadb_root_password"
      "  mariadb_user"
      "  mariadb_pwd"
  when: mariadb_status.rc != 0


- name: "ensure {{ db_grafana }} database exists"
  mysql_db:
    name: "{{ db_grafana }}"
    state: present
  register: mysql_db_grafana_created

- name: "grant RGM user to {{ db_grafana }} database"
  mysql_user:
    host: localhost
    name: "{{ mariadb_user }}"
    password: "{{ mariadb_pwd }}"
    priv: "{{ db_grafana }}.*:ALL"
    append_privs: yes
#    check_implicit_admin: yes
    login_user: root
    state: present
  when: mysql_db_grafana_created


- name: create mariadb internal RO account
  mysql_user:
    name: "{{ mariadb_ro_user }}"
    host: localhost
    password: "{{ mariadb_ro_pwd }}"
    priv: 'mysql.*:SELECT'
    append_privs: yes
#    check_implicit_admin: yes
    login_user: root
    state: present

- name: check if TZINFO data are present in MariaDB core database
  command: >
    mysql --user=root --password={{ mariadb_root_password }} --batch --skip-column-names mysql
      --execute="select count(*) from time_zone_name where Name = 'Europe/Paris';"
  register: mariadb_tzinfo_count

- name: inject TZINFO into MySQL core database
  shell: mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql --user=root --password={{ mariadb_root_password }} mysql
  args:
    executable: /bin/bash
  when: mariadb_tzinfo_count.stdout != "1"