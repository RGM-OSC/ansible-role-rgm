---
- name: "Elastic | Configure | Define fact for ES JVM heap size (total memory/2)"
  ansible.builtin.set_fact:
    jvmheapsize: "{{ (((ansible_facts['memtotal_mb'] / 1024) | round | int) / 2) | round | int }}"

- name: "Elastic | Configure | Validate to jvmheasize is max to {{ max_jvm_heapsize }}"
  when: (jvmheapsize | int) > (max_jvm_heapsize | int)
  ansible.builtin.set_fact:
    jvmheapsize: "{{ max_jvm_heapsize }}"

- name: "Elastic | Configure | Set Elasticsearch's JVM configuration"
  loop:
    - { regex: '^-Xms\d+\w$',                                     line: "-Xms{{ jvmheapsize }}g", after: 'EOF' } # noqa yaml[commas] yaml[line-length]
    - { regex: '^-Xmx\d+\w$',                                     line: "-Xmx{{ jvmheapsize }}g", after: 'EOF' } # noqa yaml[commas] yaml[line-length]
    - { regex: '^.*-XX:\+UseConcMarkSweepGC$',                    line: '# -XX:+UseConcMarkSweepGC',                                                       after: 'EOF' } # noqa yaml[commas] yaml[line-length]
    - { regex: '^.*-XX:CMSInitiatingOccupancyFraction=\d+$',      line: '# -XX:CMSInitiatingOccupancyFraction=75',                                         after: 'EOF' } # noqa yaml[commas] yaml[line-length]
    - { regex: '^.*-XX:\+UseCMSInitiatingOccupancyOnly$',         line: '# -XX:+UseCMSInitiatingOccupancyOnly',                                            after: 'EOF' } # noqa yaml[commas] yaml[line-length]
    - { regex: '^.*10-:-XX:\+UseG1GC$',                           line: '10-:-XX:+UseG1GC',                                                                after: '^#+ G1GC Configuration$' } # noqa yaml[commas] yaml[line-length]
    - { regex: '^.*10-:-XX:G1ReservePercent=\d+$',                line: '10-:-XX:G1ReservePercent=25',                                                     after: '^.*-XX:\+UseG1GC$' } # noqa yaml[commas] yaml[line-length]
    - { regex: '^.*10-:-XX:InitiatingHeapOccupancyPercent=\d+$',  line: '10-:-XX:InitiatingHeapOccupancyPercent=30',                                       after: '^.*-XX:\+UseG1GC$' } # noqa yaml[commas] yaml[line-length]
    - { regex: '^# LOG4J2 CVE',                                   line: '# LOG4J2 CVE',                                                                    after: 'EOF' } # noqa yaml[commas] yaml[line-length]
    - { regex: '^-Dlog4j2.formatMsgNoLookups=true',               line: '-Dlog4j2.formatMsgNoLookups=true',                                                after: 'EOF' } # noqa yaml[commas] yaml[line-length]
  register: elasticsearch_conf_jvm
  notify: "Service restart elasticsearch"
  ansible.builtin.lineinfile:
    path: /etc/elasticsearch/jvm.options
    regexp: "{{ item.regex }}"
    line: "{{ item.line }}"
    insertafter: "{{ item.after }}"

- name: "Elastic | Configure | Enable JVM JMX debug configuration for ES"
  loop:
    - { regex: '^# JMX',                                                line: '# JMX',                                             after: 'EOF' } # noqa yaml[commas] yaml[line-length]
    - { regex: '^.*-Dcom.sun.management.jmxremote$',                    line: '-Dcom.sun.management.jmxremote',                    after: '^# JMX$' } # noqa yaml[commas] yaml[line-length]
    - { regex: '^.*-Dcom.sun.management.jmxremote.port=\d+$',           line: '-Dcom.sun.management.jmxremote.port=10001',         after: '^-Dcom.sun.management.jmxremote.*$' } # noqa yaml[commas] yaml[line-length]
    - { regex: '^.*-Dcom.sun.management.jmxremote.host=\d+$',           line: '-Dcom.sun.management.jmxremote.host=localhost',     after: '^-Dcom.sun.management.jmxremote.*$' } # noqa yaml[commas] yaml[line-length]
    - { regex: '^.*-Dcom.sun.management.jmxremote.rmi.port=\d+$',       line: '-Dcom.sun.management.jmxremote.rmi.port=10002',     after: '^-Dcom.sun.management.jmxremote.*$' } # noqa yaml[commas] yaml[line-length]
    - { regex: '^.*-Dcom.sun.management.jmxremote.ssl=false$',          line: '-Dcom.sun.management.jmxremote.ssl=false',          after: '^-Dcom.sun.management.jmxremote.*$' } # noqa yaml[commas] yaml[line-length]
    - { regex: '^.*-Dcom.sun.management.jmxremote.authenticate=false$', line: '-Dcom.sun.management.jmxremote.authenticate=false', after: '^-Dcom.sun.management.jmxremote.*$' } # noqa yaml[commas] yaml[line-length]
  when: es_jvm_jmx
  notify: "Service restart elasticsearch"
  ansible.builtin.lineinfile:
    path: /etc/elasticsearch/jvm.options
    regexp: "{{ item.regex }}"
    line: "{{ item.line }}"
    insertafter: "{{ item.after }}"

- name: "Elastic | Configure | Set Elasticsearch's log4j configuration"
  loop:
    - { regex: '^appender.deprecation_rolling_old.regexfilter.onmatch =.*$',               line: 'appender.deprecation_rolling_old.regexfilter.onmatch = DENY' } # noqa yaml[commas] yaml[line-length]
    - { regex: '^appender.deprecation_rolling_old.regexfilter.regex =.*$',                 line: 'appender.deprecation_rolling_old.regexfilter.regex = .*\\[\\.kibana_\\d+\\].*' } # noqa yaml[commas] yaml[line-length]
    - { regex: '^appender.deprecation_rolling_old.regexfilter.type =.*$',                  line: 'appender.deprecation_rolling_old.regexfilter.type = RegexFilter' } # noqa yaml[commas] yaml[line-length]
    - { regex: '^(#\s*?)?(logger.deprecation.appenderRef.deprecation_rolling.ref\s*=.*)$', line: '#\2', br: 'yes' } # noqa yaml[commas] yaml[line-length]
  ansible.builtin.lineinfile:
    path: /etc/elasticsearch/log4j2.properties
    regexp: "{{ item.regex }}"
    line: "{{ item.line }}"
    insertafter: '^appender.deprecation_rolling_old.strategy.max.*'
    backrefs: "{{ item.br | default('no') }}"

- name: "Elastic | Configure | Configure Elasticsearch config file"
  loop:
    - { regex: '^(#\s*)?network.host: ', line: "network.host: ['127.0.0.1']" } # noqa yaml[commas]
    - { regex: '^(#\s*)?path.repo: ',    line: 'path.repo: "/srv/rgm/elastic"' } # noqa yaml[commas]
  notify: "Service restart elasticsearch"
  register: elasticsearch_conf
  ansible.builtin.lineinfile:
    path: /etc/elasticsearch/elasticsearch.yml
    regexp: "{{ item.regex }}"
    line: "{{ item.line }}"
