---

# Tasks for Elastic Stack RGM setup
# vim: bs=2 sw=2 expandtab:

# This is redundant as all RPM packages are already installed from main tasks
# but we secure it in case the role might be called directly from its tags
- name: ensure Elastic Stack is installed
  yum:
    update_cache: no
    name: "{{ packages_elastic }}"
    state: present

- block:

  - name: ensure elasticsearch is enabled and started
    systemd:
      name: elasticsearch
      state: stopped

  - name: force la suppression du sto ES
    file:
      path: /var/lib/elasticsearch/nodes
      state: absent

  when: force_delete_es is defined and force_delete_es

- name: verifie l'existence du group RGM
  command: getent group rgm
  register: getent_group
  ignore_errors: yes

- name: determinre le group propriÃ©taire du sto ES
  set_fact:
    es_group: rgm
  when: getent_group.rc == 0

- name: create elastic backup repo directory
  file:
    path: /srv/rgm/elastic
    owner: elasticsearch
    group: "{{ es_group }}"
    mode: 0750
    state: directory
    recurse: yes

- name: determine elasticsearch's JVM heap size (total memory /2)
  set_fact:
    jvmheapsize: "{{ (((ansible_facts['memtotal_mb'] / 1024) | round | int) / 2) | round | int }}"

- name: restrict JVM heap size to {{ max_jvm_heapsize}}
  set_fact:
    jvmheapsize: "{{ max_jvm_heapsize}}"
  when: (jvmheapsize | int) > (max_jvm_heapsize | int)

- name: set Elasticsearch's JVM configuration
  lineinfile:
    path: /etc/elasticsearch/jvm.options
    regexp: "{{ item.regex }}"
    line: "{{ item.line }}"
    insertafter: "{{ item.after }}"
  with_items:
  - { regex: '^-Xms\d+\w$',                                           line: "-Xms{{ jvmheapsize }}g",                            after: 'EOF' }
  - { regex: '^-Xmx\d+\w$',                                           line: "-Xmx{{ jvmheapsize }}g",                            after: 'EOF' }
  - { regex: '^.*-XX:\+UseConcMarkSweepGC$',                          line: '# -XX:+UseConcMarkSweepGC',                         after: 'EOF' }
  - { regex: '^.*-XX:CMSInitiatingOccupancyFraction=\d+$',            line: '# -XX:CMSInitiatingOccupancyFraction=75',           after: 'EOF' }
  - { regex: '^.*-XX:\+UseCMSInitiatingOccupancyOnly$',               line: '# -XX:+UseCMSInitiatingOccupancyOnly',              after: 'EOF' }
  - { regex: '^.*10-:-XX:\+UseG1GC$',                                 line: '10-:-XX:+UseG1GC',                                  after: '^#+ G1GC Configuration$' }
  - { regex: '^.*10-:-XX:G1ReservePercent=\d+$',                      line: '10-:-XX:G1ReservePercent=25',                       after: '^.*-XX:\+UseG1GC$' }
  - { regex: '^.*10-:-XX:InitiatingHeapOccupancyPercent=\d+$',        line: '10-:-XX:InitiatingHeapOccupancyPercent=30',         after: '^.*-XX:\+UseG1GC$' }
#  - { regex: '^# JMX',                                                line: '# JMX',                                             after: 'EOF' }
#  - { regex: '^.*-Dcom.sun.management.jmxremote$',                    line: '-Dcom.sun.management.jmxremote',                    after: '^# JMX$' }
#  - { regex: '^.*-Dcom.sun.management.jmxremote.port=\d+$',           line: '-Dcom.sun.management.jmxremote.port=10001',         after: '^-Dcom.sun.management.jmxremote.*$' }
#  - { regex: '^.*-Dcom.sun.management.jmxremote.host=\d+$',           line: '-Dcom.sun.management.jmxremote.host=localhost',     after: '^-Dcom.sun.management.jmxremote.*$' }
#  - { regex: '^.*-Dcom.sun.management.jmxremote.rmi.port=\d+$',       line: '-Dcom.sun.management.jmxremote.rmi.port=10002',     after: '^-Dcom.sun.management.jmxremote.*$' }
#  - { regex: '^.*-Dcom.sun.management.jmxremote.ssl=false$',          line: '-Dcom.sun.management.jmxremote.ssl=false',          after: '^-Dcom.sun.management.jmxremote.*$' }
#  - { regex: '^.*-Dcom.sun.management.jmxremote.authenticate=false$', line: '-Dcom.sun.management.jmxremote.authenticate=false', after: '^-Dcom.sun.management.jmxremote.*$' }
  - { regex: '^# LOG4J2 CVE',                                         line: '# LOG4J2 CVE',                                      after: 'EOF' }
  - { regex: '^-Dlog4j2.formatMsgNoLookups=true',                     line: '-Dlog4j2.formatMsgNoLookups=true',                  after: 'EOF' }
  register: elasticsearch_conf_jvm
  notify: service_restart_elasticsearch

- name: set Elasticsearch's log4j configuration
  lineinfile:
    path: /etc/elasticsearch/log4j2.properties
    regexp: "{{ item.regex }}"
    line: "{{ item.line }}"
    insertafter: '^appender.deprecation_rolling_old.strategy.max.*'
    backrefs: "{{ item.br | default('no') }}"
  with_items:
  - { regex: '^appender.deprecation_rolling_old.regexfilter.onmatch =.*$',            line: 'appender.deprecation_rolling_old.regexfilter.onmatch = DENY' }
  - { regex: '^appender.deprecation_rolling_old.regexfilter.regex =.*$',              line: 'appender.deprecation_rolling_old.regexfilter.regex = .*\\[\\.kibana_\\d+\\].*' }
  - { regex: '^appender.deprecation_rolling_old.regexfilter.type =.*$',               line: 'appender.deprecation_rolling_old.regexfilter.type = RegexFilter' }
  - { regex: '^(#\s*?)?(logger.deprecation.appenderRef.deprecation_rolling.ref\s*=.*)$', line: '#\2', br: 'yes' }

- name: ensure ES data path is owned by elasticsearch user
  file:
    path: /var/lib/elasticsearch
    recurse: yes
    owner: elasticsearch
    group: elasticsearch
    seuser: system_u
    serole: object_r
    setype: var_lib_t
    selevel: s0

- name: ensure elasticsearch is enabled and started
  systemd:
    name: elasticsearch
    enabled: yes
    state: started

- name: copy curator config files
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dst }}"
    owner: root
    group: root
    mode: 0644
  with_items:
  - { src: 'elastic/curator_actions.yml.j2',    dst: '/etc/elasticsearch/actions.yml' }
  - { src: 'elastic/curator.yml.j2',            dst: '/etc/elasticsearch/curator.yml' }

- name: set cron job for curator
  copy:
    content: "10 0 * * * root /usr/bin/curator --config /etc/elasticsearch/curator.yml /etc/elasticsearch/actions.yml > /dev/null"
    dest: /etc/cron.d/elastic_curator
    owner: root
    group: root
    mode: 0644
  notify: service_reload_crond

### Configure kibana

- name: configure Kibana config file
  lineinfile:
    path: /etc/kibana/kibana.yml
    regexp: "{{ item.regex }}"
    line: "{{ item.line }}"
  with_items:
  - { regex: '^(#\s*)?server.port',                         line: 'server.port: 5601' }
  - { regex: '^(#\s*)?server.host',                         line: 'server.host: "localhost"' }
  - { regex: '^(#\s*)?server.basePath',                     line: 'server.basePath: "/kibana"' }
  - { regex: '^(#\s*)?server.rewriteBasePath',              line: 'server.rewriteBasePath: true' }
  - { regex: '^(#\s*)?kibana.defaultAppId',                 line: 'kibana.defaultAppId: "discover"' }
  - { regex: '^(#\s*)?newsfeed.enabled',                    line: 'newsfeed.enabled: false' }
  - { regex: '^(#\s*)?security.showInsecureClusterWarning', line: 'security.showInsecureClusterWarning: false' }
  notify: service_restart_kibana


### configure metricbeat

- name: configure metricbeat
  template:
    src: "metricbeat/{{ item.src }}.yml.j2"
    dest: "/etc/metricbeat/{{ item.dst }}.yml"
    owner: root
    group: root
    mode: 0640
  with_items:
  - { src: 'metricbeat',    dst: 'metricbeat' }
  - { src: 'module_apache', dst: 'modules.d/apache' }
  - { src: 'module_kibana', dst: 'modules.d/kibana' }
  - { src: 'module_mysql',  dst: 'modules.d/mysql' }
  - { src: 'module_system', dst: 'modules.d/system' }
  register: metricbeat_config
  notify: service_restart_metricbeat

### configure filebeat

- name: configure filebeat
  template:
    src: "filebeat/{{ item.src }}.yml.j2"
    dest: "/etc/filebeat/{{ item.dst }}.yml"
    owner: root
    group: root
    mode: 0640
  with_items:
  - { src: 'filebeat',    dst: 'filebeat' }
  - { src: 'system', dst: 'modules.d/system' }
  - { src: 'apache', dst: 'modules.d/apache' }
  register: filebeat_config
  notify: service_restart_filebeat
