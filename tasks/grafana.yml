---
# Tasks for Grafana/Histou RGM setup
# vim: bs=2 sw=2 expandtab:

# This is redundant as all RPM packages are already installed from main tasks
# but we secure it in case the role might be called directly from its tags
- name: ensure Grafana & Co packages are present
  yum:
    update_cache: no
    name: "{{ packages_influx_grafana }}"
    state: present

- name: creates Grafana RGM dashboards directory
  file:
    path: "{{ grafana_rgm_dashboards }}"
    owner: grafana
    group: "{{ rgm_group }}"
    mode: 0755
    state: directory

- name: copy grafana patches
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: "{{ item.mode }}"
  with_items:
  - { mode: '0644', src: grafana/grafana_icon.svg, dest: /usr/share/grafana/public/img/grafana_icon.svg }
  - { mode: '0744', src: grafana/grafana_rgm.sh,   dest: /etc/grafana/grafana_rgm.sh }

- name: install grafana dash templates
  copy:
    src: "grafana/{{ item }}"
    dest: "{{ grafana_rgm_dashboards }}/{{ item }}"
    owner: grafana
    group: rgm
    mode: 0644
  with_items:
  - 4any-k8s-monitoring.json
  - active_directory_dns.json
  - apache.json
  - azure_compute.json
  - azure_storage.json
  - elasticsearch_cluster.json
  - influxdb_internals.json
  - multi-system-metrics.json
  - mysql_percona.json
  - prometheus_node_exporter.json
  - prometheus_service.json
  - realtime-containers-nodes-metrics.json
  - vmware_stats.json

- name: apply patches to align Grafana theme on RGM theme
  command: /etc/grafana/grafana_rgm.sh
  register: grafana_patch
  failed_when: grafana_patch.rc == 255
  changed_when: grafana_patch.rc > 0
  when: grafana_apply_patches

- name: "configure grafana.ini file"
  ini_file:
    path: /etc/grafana/grafana.ini
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
  - { section: 'paths',             option: 'logs',                 value: '/var/log/grafana' }
  - { section: 'paths',             option: 'plugins',              value: '/var/lib/grafana/plugins' }
  - { section: 'server',            option: 'protocol',             value: 'http' }
  - { section: 'server',            option: 'http_addr',            value: "{{ grafana_http_addr }}" }
  - { section: 'server',            option: 'http_port',            value: "{{ grafana_http_port }}" }
  - { section: 'server',            option: 'domain',               value: "{{ grafana_domain }}" }
  - { section: 'server',            option: 'root_url',             value: "http://{{ grafana_domain }}{{ grafana_root_url }}/" }
  - { section: 'analytics',         option: 'reporting_enabled',    value: 'false' }
  - { section: 'analytics',         option: 'check_for_updates',    value: 'false' }
  - { section: 'database',          option: 'type',                 value: 'mysql' }
  - { section: 'database',          option: 'host',                 value: '127.0.0.1:3306' }
  - { section: 'database',          option: 'name',                 value: "{{ db_grafana }}" }
  - { section: 'database',          option: 'user',                 value: "{{ mariadb_user }}" }
  - { section: 'database',          option: 'password',             value: "{{ mariadb_pwd }}" }
  - { section: 'security',          option: 'admin_user',           value: 'admin' }
  - { section: 'security',          option: 'allow_embedding',      value: 'true' }
  - { section: 'users',             option: 'default_theme',        value: 'light' }
  - { section: 'auth',              option: 'disable_login_form',   value: 'true' }
  - { section: 'auth',              option: 'disable_signout_menu', value: 'true' }
  - { section: 'auth.anonymous',    option: 'enabled',              value: 'true' }
  - { section: 'auth.anonymous',    option: 'org_role',             value: 'Viewer' }
  - { section: 'auth.github',       option: 'enabled',              value: 'false' }
  - { section: 'auth.google',       option: 'enabled',              value: 'false' }
  - { section: 'auth.generic_oauth',option: 'enabled',              value: 'false' }
  - { section: 'auth.grafana_com',  option: 'enabled',              value: 'false' }
  - { section: 'auth.proxy',        option: 'enabled',              value: 'true' }
  - { section: 'auth.proxy',        option: 'header_name',          value: 'X-WEBAUTH-USER' }
  - { section: 'auth.proxy',        option: 'header_property',      value: 'username' }
  - { section: 'auth.proxy',        option: 'auto_sign_up',         value: 'false' }
  - { section: 'auth.basic',        option: 'enabled',              value: 'false' }
  - { section: 'auth.ldap',         option: 'enabled',              value: 'false' }
  notify: service_restart_grafana
  register: grafana_ini_changed

- name: "create histoujs symlink on Grafana public dir"
  file:
    path: /usr/share/grafana/public/dashboards/histou.js
    src: /srv/rgm/histou/histou.js
    state: link
    mode: 0644

- name: set grafana datasources and dashboards
  template:
    src: "grafana/{{ item.src }}"
    dest: "/etc/grafana/provisioning/{{ item.dest }}"
    owner: root
    group: grafana
    mode: 0640
  with_items:
  - { src: rgm_ds.yml.j2,   dest: datasources/rgm_ds.yaml }
  - { src: rgm_dash.yml.j2, dest: dashboards/rgm_dash.yaml }

- name: ensure grafana service is running
  systemd:
    name: grafana-server
    enabled: yes
    state: started
  register: grafana_first_start

- name: restart grafana service if config changed
  systemd:
    name: grafana-server
    enabled: yes
    state: restarted
  when: grafana_ini_changed.changed and not grafana_first_start.changed

- name: install grafana core plugins
  grafana_plugin:
    name: "{{ item }}"
    state: present
  with_items: "{{ grafana_plugins_core }}"
  retries: 3
  delay: 2
  register: grafana_plugins_core_installed
  until: not grafana_plugins_core_installed.failed|bool
  when: grafana_install_plugins_core|bool
  notify: service_restart_grafana

- name: install grafana contrib plugins
  grafana_plugin:
    name: "{{ item }}"
    state: present
  with_items: "{{ grafana_plugins_contrib }}"
  retries: 3
  delay: 2
  register: grafana_plugins_contrib_installed
  until: not grafana_plugins_contrib_installed.failed|bool
  when: grafana_install_plugins_contrib|bool
  notify: service_restart_grafana

- name: copy Grafana SQL procedures
  copy:
    src: grafana/grafana_stored_procedures.sql
    dest: /etc/grafana/rgm_procedures.sql
    owner: root
    group: root
    mode: 0644
  register: granafa_sql_procs

- name: insert SQL procedures on Grafana DB
  shell: mysql grafana < /etc/grafana/rgm_procedures.sql
  args:
    executable: /bin/bash
  register: granafa_sql_exec
  changed_when: granafa_sql_exec.rc == 1
  failed_when: granafa_sql_exec.rc == 2
  when: granafa_sql_procs.changed
