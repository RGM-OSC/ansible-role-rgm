---
- name: 'RGM | Packages | Ensure dnf versionlock is present for EL7'
  when:
    ansible_distribution_major_version|int == 7
  ansible.builtin.yum:
    update_cache: false
    name: "yum-plugin-versionlock"
    state: present

- name: 'RGM | Packages | Ensure dnf versionlock is present for EL9'
  when:
    ansible_distribution_major_version|int >= 9
  ansible.builtin.yum:
    update_cache: false
    name: "python3-dnf-plugin-versionlock"
    state: present

- name: 'RGM | Packages | Copy grafana repository to fix version (else appstream repository is used)'
  ansible.builtin.copy:
    src: "grafana/grafana.repo"
    dest: "/etc/yum.repos.d/grafana.repo"
    owner: root
    group: root
    mode: "0644"

- name: "RGM | Packages | Yum regenerate cache"
  ansible.builtin.yum:
    update_cache: true

- name: "RGM | Packages | Import grafana repository GPG key"
  ansible.builtin.rpm_key:
    key: https://rpm.grafana.com/gpg.key
    state: present

- name: "RGM | Packages | Prevent grafana version 6.4.0 from being updated on EL7"
  when:
    - ansible_distribution_major_version|int == 7
  community.general.yum_versionlock:
    state: present
    name:
      - grafana-6.4.0-1.x86_64

- name: "RGM | Packages | Prevent grafana version 6.4.0 from being updated"
  when:
    - ansible_distribution_major_version|int >= 9
  community.general.dnf_versionlock:
    state: present
    name:
      - grafana-6.4.0-1.x86_64

- name: "RGM | Packages | Install RGM Packages (it may take some time...)"
  retries: 10
  delay: 2
  register: yum_result
  until: yum_result.rc == 0
  ansible.builtin.yum:
    update_cache: true
    name: "{{ packages.system + packages.apache + packages.elastic + packages.influx_grafana + packages.prometheus + packages.rgm + packages.partners + extra_packages }}" # noqa yaml[line-length]
    state: present

- name: "RGM | Packages | Install additionnal RGM Packages for EL7 (it may take some time...)"
  when:
    - ansible_distribution_major_version|int == 7
  retries: 10
  delay: 2
  register: yum_result
  until: yum_result.rc == 0
  ansible.builtin.yum:
    update_cache: true
    name: "{{ packages.system_el7 + packages.prometheus_el7 }}" # noqa yaml[line-length]
    state: present

- name: "RGM | Packages | Install additionnal RGM Packages for EL9 (it may take some time...)"
  when:
    - ansible_distribution_major_version|int >= 9
  retries: 10
  delay: 2
  register: yum_result
  until: yum_result.rc == 0
  ansible.builtin.yum:
    update_cache: true
    name: "{{ packages.system_el9 }}" # noqa yaml[line-length]
    state: present

- name: "RGM | Packages | Check if gedadmin user exist"
  register: _gedadmin_db_account
  community.mysql.mysql_query:
    query: "SELECT Host,User FROM user WHERE User='gedadmin';"
    login_db: 'mysql'
    config_file: '/root/.my.cnf'

- name: "RGM | Packages | Initialize GED database"
  when:
    _gedadmin_db_account.rowcount[0] == 0
  community.mysql.mysql_db:
    name: all
    state: import
    target: '/srv/rgm/ged/etc/bkd/ged-init.sql'
    config_file: '/root/.my.cnf'

- name: "RGM | Packages | Install business packages"
  tags:
    - business
  ansible.builtin.yum:
    state: present
    name:
      - bed-rgm-client

- name: "RGM | Packages | Ensure correct capabilities for binaries"
  loop:
    - { path: '/usr/bin/ping', caps: 'cap_net_admin,cap_net_raw+p' }
  tags:
    - set_capabilities
    - rgm_set_capabilities
  community.general.capabilities:
    path: "{{ item.path }}"
    capability: "{{ item.caps }}"
    state: present
